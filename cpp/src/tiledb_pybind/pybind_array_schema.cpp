#include "pybind_array_schema.h" 

void init_tiledb_ArraySchema(pybind11::module& m) {
	pybind11::class_<tiledb::ArraySchema, std::shared_ptr<tiledb::ArraySchema> >(m,"ArraySchema")
		.def(py::init<const tiledb::Context &,tiledb_array_type_t>())
		.def(py::init<const tiledb::Context &,const std::string &>())
		.def(py::init<const tiledb::Context &,const std::string &,tiledb_encryption_type_t,const void *,uint32_t>())
		.def(py::init<const tiledb::Context &,const std::string &,tiledb_encryption_type_t,const std::string &>())
//ignore_keywords 	 ArraySchema( const tiledb::Context & ctx, tiledb_array_schema_t * schema)
//ignore_constructor_deleted 	 ArraySchema()
		.def(py::init<const tiledb::ArraySchema>())
		.def(py::init<tiledb::ArraySchema &>())
//ignore_destructor 	virtual  ~ArraySchema()
//ignore_keywords 	ArraySchema & operator=( const tiledb::ArraySchema &)
//ignore_keywords 	ArraySchema & operator=( tiledb::ArraySchema & &)
//ignore_keywords 	void dump( FILE * out)
		.def("array_type", &tiledb::ArraySchema::array_type)
		.def("capacity", &tiledb::ArraySchema::capacity)
		.def("set_capacity", &tiledb::ArraySchema::set_capacity, py::arg("capacity"))
		.def("allows_dups", &tiledb::ArraySchema::allows_dups)
		.def("set_allows_dups", &tiledb::ArraySchema::set_allows_dups, py::arg("allows_dups"))
		.def("tile_order", &tiledb::ArraySchema::tile_order)
		.def("set_tile_order", &tiledb::ArraySchema::set_tile_order, py::arg("layout"))
		.def("set_order", &tiledb::ArraySchema::set_order, py::arg("p"))
		.def("cell_order", &tiledb::ArraySchema::cell_order)
		.def("set_cell_order", &tiledb::ArraySchema::set_cell_order, py::arg("layout"))
		.def("coords_filter_list", &tiledb::ArraySchema::coords_filter_list)
		.def("set_coords_filter_list", &tiledb::ArraySchema::set_coords_filter_list, py::arg("filter_list"))
		.def("offsets_filter_list", &tiledb::ArraySchema::offsets_filter_list)
		.def("set_offsets_filter_list", &tiledb::ArraySchema::set_offsets_filter_list, py::arg("filter_list"))
		.def("domain", &tiledb::ArraySchema::domain)
		.def("set_domain", &tiledb::ArraySchema::set_domain, py::arg("domain"))
		.def("add_attribute", &tiledb::ArraySchema::add_attribute, py::arg("attr"))
		.def("add_int32_attribute", &tiledb::ArraySchema::add_int32_attribute, py::arg("name"), py::arg("filter_types"))
		.def("add_int64_attribute", &tiledb::ArraySchema::add_int64_attribute, py::arg("name"), py::arg("filter_types"))
		.def("add_uint64_attribute", &tiledb::ArraySchema::add_uint64_attribute, py::arg("name"), py::arg("filter_types"))
		.def("add_double_attribute", &tiledb::ArraySchema::add_double_attribute, py::arg("name"), py::arg("filter_types"))
		.def("add_string_attribute", &tiledb::ArraySchema::add_string_attribute, py::arg("name"), py::arg("filter_types"))
//ignore_keywords 	std::shared_ptr<tiledb_array_schema_t > ptr()
		.def("check", &tiledb::ArraySchema::check)
//ignore_keywords 	std::unordered_map<std::string, tiledb::Attribute > attributes()
		.def("attribute", (tiledb::Attribute (tiledb::ArraySchema::*)(const std::string &) const)(&tiledb::ArraySchema::attribute), py::arg("name"))
		.def("attribute_num", &tiledb::ArraySchema::attribute_num)
		.def("attribute", (tiledb::Attribute (tiledb::ArraySchema::*)(unsigned int) const)(&tiledb::ArraySchema::attribute), py::arg("i"))
		.def("has_attribute", &tiledb::ArraySchema::has_attribute, py::arg("name"))
		.def("to_info_str", &tiledb::ArraySchema::to_info_str)
		.def_static("to_str", static_cast< std::string (*)(tiledb_array_type_t) >(&tiledb::ArraySchema::to_str))
		.def_static("to_str", static_cast< std::string (*)(tiledb_layout_t) >(&tiledb::ArraySchema::to_str))
		;

}

